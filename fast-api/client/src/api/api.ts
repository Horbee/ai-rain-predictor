/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface CityWeather
 */
export interface CityWeather {
    /**
     * 
     * @type {number}
     * @memberof CityWeather
     */
    'temperature': number;
    /**
     * 
     * @type {number}
     * @memberof CityWeather
     */
    'humidity': number;
    /**
     * 
     * @type {number}
     * @memberof CityWeather
     */
    'pressure': number;
    /**
     * 
     * @type {string}
     * @memberof CityWeather
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CityWeather
     */
    'last_updated': string;
}
/**
 * 
 * @export
 * @interface CityWeatherWithRainPredictionResponse
 */
export interface CityWeatherWithRainPredictionResponse {
    /**
     * 
     * @type {CityWeather}
     * @memberof CityWeatherWithRainPredictionResponse
     */
    'city_weather': CityWeather;
    /**
     * 
     * @type {RainPredictResponse}
     * @memberof CityWeatherWithRainPredictionResponse
     */
    'prediction': RainPredictResponse;
}
/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface Measurement
 */
export interface Measurement {
    /**
     * 
     * @type {number}
     * @memberof Measurement
     */
    'id'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Measurement
     */
    'temperature': number;
    /**
     * 
     * @type {number}
     * @memberof Measurement
     */
    'humidity': number;
    /**
     * 
     * @type {number}
     * @memberof Measurement
     */
    'pressure': number;
    /**
     * 
     * @type {string}
     * @memberof Measurement
     */
    'created_at'?: string | null;
}
/**
 * 
 * @export
 * @interface MeasurementWithRainPredictionResponse
 */
export interface MeasurementWithRainPredictionResponse {
    /**
     * 
     * @type {Measurement}
     * @memberof MeasurementWithRainPredictionResponse
     */
    'measurement': Measurement;
    /**
     * 
     * @type {RainPredictResponse}
     * @memberof MeasurementWithRainPredictionResponse
     */
    'prediction': RainPredictResponse;
}
/**
 * 
 * @export
 * @interface MeasurementsBody
 */
export interface MeasurementsBody {
    /**
     * 
     * @type {number}
     * @memberof MeasurementsBody
     */
    'temp': number;
    /**
     * 
     * @type {number}
     * @memberof MeasurementsBody
     */
    'humidity': number;
    /**
     * 
     * @type {number}
     * @memberof MeasurementsBody
     */
    'pressure': number;
}
/**
 * 
 * @export
 * @interface RainPredictResponse
 */
export interface RainPredictResponse {
    /**
     * 
     * @type {string}
     * @memberof RainPredictResponse
     */
    'prediction': string;
    /**
     * 
     * @type {number}
     * @memberof RainPredictResponse
     */
    'probability': number;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<ValidationErrorLocInner>}
     * @memberof ValidationError
     */
    'loc': Array<ValidationErrorLocInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface ValidationErrorLocInner
 */
export interface ValidationErrorLocInner {
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary City Weather
         * @param {string} city 
         * @param {CityWeatherApiWeatherGetModelEnum} [model] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cityWeatherApiWeatherGet: async (city: string, model?: CityWeatherApiWeatherGetModelEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'city' is not null or undefined
            assertParamExists('cityWeatherApiWeatherGet', 'city', city)
            const localVarPath = `/api/weather`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (city !== undefined) {
                localVarQueryParameter['city'] = city;
            }

            if (model !== undefined) {
                localVarQueryParameter['model'] = model;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Measurement
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMeasurementApiMeasurementsIdDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteMeasurementApiMeasurementsIdDelete', 'id', id)
            const localVarPath = `/api/measurements/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheckApiHealthGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/health`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Rain Predict
         * @param {Array<MeasurementsBody>} measurementsBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rainPredictApiRainPredictPost: async (measurementsBody: Array<MeasurementsBody>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'measurementsBody' is not null or undefined
            assertParamExists('rainPredictApiRainPredictPost', 'measurementsBody', measurementsBody)
            const localVarPath = `/api/rain_predict`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(measurementsBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read Measurements
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readMeasurementsApiMeasurementsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/measurements`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary City Weather
         * @param {string} city 
         * @param {CityWeatherApiWeatherGetModelEnum} [model] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cityWeatherApiWeatherGet(city: string, model?: CityWeatherApiWeatherGetModelEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CityWeatherWithRainPredictionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cityWeatherApiWeatherGet(city, model, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Measurement
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMeasurementApiMeasurementsIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMeasurementApiMeasurementsIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthCheckApiHealthGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: string; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.healthCheckApiHealthGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Rain Predict
         * @param {Array<MeasurementsBody>} measurementsBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rainPredictApiRainPredictPost(measurementsBody: Array<MeasurementsBody>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RainPredictResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rainPredictApiRainPredictPost(measurementsBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Read Measurements
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readMeasurementsApiMeasurementsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MeasurementWithRainPredictionResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readMeasurementsApiMeasurementsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary City Weather
         * @param {string} city 
         * @param {CityWeatherApiWeatherGetModelEnum} [model] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cityWeatherApiWeatherGet(city: string, model?: CityWeatherApiWeatherGetModelEnum, options?: any): AxiosPromise<CityWeatherWithRainPredictionResponse> {
            return localVarFp.cityWeatherApiWeatherGet(city, model, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Measurement
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMeasurementApiMeasurementsIdDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteMeasurementApiMeasurementsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheckApiHealthGet(options?: any): AxiosPromise<{ [key: string]: string; }> {
            return localVarFp.healthCheckApiHealthGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Rain Predict
         * @param {Array<MeasurementsBody>} measurementsBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rainPredictApiRainPredictPost(measurementsBody: Array<MeasurementsBody>, options?: any): AxiosPromise<Array<RainPredictResponse>> {
            return localVarFp.rainPredictApiRainPredictPost(measurementsBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read Measurements
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readMeasurementsApiMeasurementsGet(options?: any): AxiosPromise<Array<MeasurementWithRainPredictionResponse>> {
            return localVarFp.readMeasurementsApiMeasurementsGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary City Weather
     * @param {string} city 
     * @param {CityWeatherApiWeatherGetModelEnum} [model] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public cityWeatherApiWeatherGet(city: string, model?: CityWeatherApiWeatherGetModelEnum, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).cityWeatherApiWeatherGet(city, model, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Measurement
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteMeasurementApiMeasurementsIdDelete(id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteMeasurementApiMeasurementsIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Health Check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public healthCheckApiHealthGet(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).healthCheckApiHealthGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Rain Predict
     * @param {Array<MeasurementsBody>} measurementsBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public rainPredictApiRainPredictPost(measurementsBody: Array<MeasurementsBody>, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).rainPredictApiRainPredictPost(measurementsBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Read Measurements
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public readMeasurementsApiMeasurementsGet(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).readMeasurementsApiMeasurementsGet(options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const CityWeatherApiWeatherGetModelEnum = {
    PytorchNn: 'pytorch_nn',
    SckitlearnForest: 'sckitlearn_forest'
} as const;
export type CityWeatherApiWeatherGetModelEnum = typeof CityWeatherApiWeatherGetModelEnum[keyof typeof CityWeatherApiWeatherGetModelEnum];


